星 矩形

#include<iostream>
#include<string>
using namespace std;
#include<ctime>

int main()
{

	for (int i = 0; i < 10; i++)
	{
		for (int i = 0; i < 10; i++)
		{
			cout <<"* ";
		}
		cout << endl;
	}

	

	system("pause");
	return 0;
}

乘法口诀

#include<iostream>
#include<string>
using namespace std;
#include<ctime>

int main()
{
	for (int i = 1; i <=9; i++)
	{
		//cout << i << endl;
		for (int j = 1; j <= i; j++)
		{
			cout << j<<"*"<<i<<"="<<j*i<<"  ";
		}
		cout << endl;
	}


	system("pause");
	return 0;
}



continue语句：跳过当前程序以下的操作，执行下一步循环

	for (int i = 1; i <=100; i++)
	{
		if (i % 2 == 0)
		{
			continue;
		}
		cout << i << endl;
	}


数组

#include<iostream>
#include<string>
using namespace std;
#include<ctime>

int main()
//数组用途：统计数组内存空间大小; 查找数组首地址
{
	int arr[5] = { 10,20,30,40,50 };
	cout << "数组内存大小为：" <<sizeof(arr)<< endl;
	cout << "数组元素为：" << sizeof(arr) / sizeof(arr[0]) << endl;

	cout << "数组首地址为：" << arr << endl;
	cout << "数组中第一个元素的地址为：" << &arr[0] << endl;

	system("pause");
	return 0;
}

查找最大算法

#include<iostream>
#include<string>
using namespace std;
#include<ctime>

int main()

{
	int arr[5] = { 300,200,350,400,390 };
	int max = 0;
	for (int i = 0; i < 5; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}

		//cout << arr[i] << endl;
	}
	cout << "最重的梅猪为：" << max << endl;
	system("pause");
	return 0;
}

元素倒置
#include<iostream>
#include<string>
using namespace std;
#include<ctime>

int main()

{
	int arr[5] = { 1,3,6,4,2 };
	cout<<"数组倒置前：" << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << arr[i] << endl;
	}
	//开始倒置
    // 2、实现逆置 
		/*2.1记录起始下标位置 /
		2.2记录结束下标位置 /
		2.3起始下标与结束下标的元素互换
		2.4起始位置++结束位置--
		2.5循环执行操作，直到起始位置>= 结束位置*/
	int start = 0;//起始位置
	int end = sizeof(arr) / sizeof(arr[0]) - 1;

	while (start < end)
	{
		//元素互换
		int temp = arr[start];
		arr[start] = arr[end];
		arr[end] = temp;
		//下标更新
		start ++;
		end --;
	}
	cout << "数组倒置后：" << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << arr[i] << endl;
	}
	
	system("pause");
	return 0;
}
